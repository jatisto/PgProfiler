@page "/file_list"
@using PgProfiler.Data
@using MoiLib.Helpers
@inject PgProfilerService PgProfilerReader
@inject JsRuntimeForBlazorHelper JsRuntimeForBlazorHelper;

<MudTable ServerData="@(new Func<TableState, Task<TableData<LogFileInfo>>>(ServerReload))"
          Dense="@Dense" Hover="@Hover" Bordered="@Bordered" Striped="@Striped" @ref="_table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список файлов</MudText>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(s => OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="nr_field" T="LogFileInfo">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="sign_field" T="LogFileInfo">Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="name_field" T="LogFileInfo">DirectoryName</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="position_field" T="LogFileInfo">Directory</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="mass_field" T="LogFileInfo">CreateDateTime</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="mass_field" T="LogFileInfo">OpenFile</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Id</MudTd>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="DirectoryName">@context.DirectoryName</MudTd>
        <MudTd DataLabel="Directory">@context.Directory</MudTd>
        <MudTd DataLabel="CreateDateTime">@context.CreateDateTime</MudTd>
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.FileOpen" aria-label="edit" @onclick="() => OpenFile(context)"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>Не чего не найдено</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Загрузка...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    
    private const bool Dense = false;
    private const bool Hover = true;
    private const bool Striped = true;
    private const bool Bordered = true;
    private IEnumerable<LogFileInfo>? _pagedData;
    private MudTable<LogFileInfo>? _table;
    private int _totalItems;
    private string? _searchString;

    private static void OpenFile (LogFileInfo file) => PgProfilerService.ProcessStart(file.DirectoryName, file.Name);

    /// <summary>
    /// Формирование данных для таблицы
    /// </summary>
    private async Task<TableData<LogFileInfo>> ServerReload (TableState state)
    {

        try
        {
            var pathDefault = await PgProfilerReader.GetSettings();
            var data = await PgProfilerReader.GetFileInDirectory(pathDefault.Path!);
            await Task.Delay(300);
            data = data.Where(element =>
            {
                if (string.IsNullOrWhiteSpace(_searchString)) return true;
                if (element.Name!.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) return true;
                return element.DirectoryName != null && (element.DirectoryName.Contains(_searchString, StringComparison.OrdinalIgnoreCase) || $"{element.Id} {element.Name}".Contains(_searchString));
            }).ToArray();
            _totalItems = data.Count();
            data = state.SortLabel switch {"id_field" => data.OrderByDirection(state.SortDirection, o => o.Id),"name_field" => data.OrderByDirection(state.SortDirection, o => o.Name),"directoryName_field" => data.OrderByDirection(state.SortDirection, o => o.DirectoryName),"directory_field" => data.OrderByDirection(state.SortDirection, o => o.Directory),"createDateTime_field" => data.OrderByDirection(state.SortDirection, o => o.CreateDateTime),_ => data};

            _pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
            return new TableData<LogFileInfo>() {TotalItems = _totalItems, Items = _pagedData};
        } catch (Exception e)
        {
            return new TableData<LogFileInfo>();
        }
    }

    private void OnSearch (string? text)
    {
        _searchString = text;
        _table!.ReloadServerData();
    }
}